import cv2
import numpy as np

def get_color_name(color_BGR):
    colors = {
        "red": (0, 0, 255),
        "green": (0, 255, 0),
        "blue": (255, 0, 0),
        "yellow": (0, 255, 255),
        "orange": (0, 165, 255),
        "purple": (128, 0, 128),
        "pink": (147, 20, 255),
        "white": (255, 255, 255),
        "black": (0, 0, 0)
    }
    
    color_name = "unknown"
    min_dist = float("inf")
    
    for name, color in colors.items():
        dist = np.linalg.norm(np.array(color_BGR) - np.array(color))
        if dist < min_dist:
            min_dist = dist
            color_name = name
    
    return color_name

def color_recognition():
    # Open the video capture
    cap = cv2.VideoCapture(0)
    
    while True:
        # Read the frame from the video capture
        ret, frame = cap.read()
        
        # Convert the BGR frame to HSV color space
        hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        
        # Define the color ranges for detection
        lower_red = np.array([0, 100, 100])
        upper_red = np.array([10, 255, 255])
        
        lower_green = np.array([50, 100, 100])
        upper_green = np.array([70, 255, 255])
        
        lower_blue = np.array([110, 100, 100])
        upper_blue = np.array([130, 255, 255])
        
        # Threshold the frame to get only the desired colors
        red_mask = cv2.inRange(hsv_frame, lower_red, upper_red)
        green_mask = cv2.inRange(hsv_frame, lower_green, upper_green)
        blue_mask = cv2.inRange(hsv_frame, lower_blue, upper_blue)
        
        # Bitwise-AND the masks and the original frame
        red_result = cv2.bitwise_and(frame, frame, mask=red_mask)
        green_result = cv2.bitwise_and(frame, frame, mask=green_mask)
        blue_result = cv2.bitwise_and(frame, frame, mask=blue_mask)
        
        # Combine the results
        result = cv2.bitwise_or(red_result, cv2.bitwise_or(green_result, blue_result))
        
        # Display the resulting frame
        cv2.imshow('Color Recognition', result)
        
        # Check for key press to exit
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    
    # Release the video capture and close the windows
    cap.release()
    cv2.destroyAllWindows()

color_recognition()
